<?php
/* vim: set expandtab tabstop=4 shiftwidth=4: */
// +----------------------------------------------------------------------+
// | Fez - Digital Repository System                                      |
// +----------------------------------------------------------------------+
// | Copyright (c) 2005-2010 The University of Queensland,                |
// | Australian Partnership for Sustainable Repositories,                 |
// | eScholarship Project                                                 |
// |                                                                      |
// | Some of the Fez code was derived from Eventum (Copyright 2003, 2004  |
// | MySQL AB - http://dev.mysql.com/downloads/other/eventum/ - GPL)      |
// |                                                                      |
// | This program is free software; you can redistribute it and/or modify |
// | it under the terms of the GNU General Public License as published by |
// | the Free Software Foundation; either version 2 of the License, or    |
// | (at your option) any later version.                                  |
// |                                                                      |
// | This program is distributed in the hope that it will be useful,      |
// | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        |
// | GNU General Public License for more details.                         |
// |                                                                      |
// | You should have received a copy of the GNU General Public License    |
// | along with this program; if not, write to:                           |
// |                                                                      |
// | Free Software Foundation, Inc.                                       |
// | 59 Temple Place - Suite 330                                          |
// | Boston, MA 02111-1307, USA.                                          |
// +----------------------------------------------------------------------+
// | Authors: Christiaan Kortekaas <c.kortekaas@library.uq.edu.au>        |
// +----------------------------------------------------------------------+
ini_set("display_errors", 1); // LKDB - tmp (was 1)
include_once('../config.inc.php');
include_once(APP_INC_PATH . 'class.esti_search_service.php');
include_once(APP_INC_PATH . "class.record.php");

$max = 100; 		// Max number of primary key IDs to send with each ESTI Search Service request call
$sleep = 1; 	// Number of seconds to wait for between successive ESTI Search Service calls 

// Maps WoS document type to eSpace type and eSpace sub-type
// this will be replaced with a mapping generated by the user using
// a new admin screen in the future, but for now need to import Journal Articles, so...
$doc_type_mapping = array(
        '@' => array('Journal Article','Article'),
        'A' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        '7' => array('Journal Article','Article'),
        'I' => array('Journal Article','Other (News item, press release, note, obituary, other not liste'),
        'B' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        'K' => array('Journal Article','Article'),
        'C' => array('Journal Article','Correction/erratum'),
        'Z' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        '0' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        'D' => array('Journal Article','Discussion (responses, round table/panel discussions, Q&A, reply'),
        'E' => array('Journal Article','Editorial'),
        'X' => array('Journal Article','Other (News item, press release, note, obituary, other not liste'),
        'O' => array('Journal Article','Creative output (poetry, musical score, fiction or prose)'),
        'F' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        '8' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        'L' => array('Journal Article','Letter'),
        'J' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        'S' => array('Journal Article','Creative output (poetry, musical score, fiction or prose)'),
        'G' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        '5' => array('Journal Article','Other (News item, press release, note, obituary, other not liste'),
        'N' => array('Journal Article','Other (News item, press release, note, obituary, other not liste'),
        'Y' => array('Journal Article','Creative output (poetry, musical score, fiction or prose)'),
        'H' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        '6' => array('Journal Article','Other (News item, press release, note, obituary, other not liste'),
        'R' => array('Journal Article','Review of research - research literature review (NOT book review'),
        'Q' => array('Journal Article','Other (News item, press release, note, obituary, other not liste'),
        '9' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        'V' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),
        'T' => array('Journal Article','Review of Book, Film, TV, video, software, performance, music et'),                    
        'MC' => array('Conference Item','Published Abstract'),
        'M' => array('Conference Item','Published Abstract'),
        '$' => array('Conference Paper',''),
        'P' => array('Conference Paper',''),
        'U' => array('Conference Paper','')
);

/*$filter = array();
$filter["searchKey".Search_Key::getID("Status")] = 2; // enforce published records only
$filter["searchKey".Search_Key::getID("Object Type")] = 3; // records only
*/
//$listing = Record::getListing(array(), array(9,10), 0, $max, 'Created Date', false, false, $filter);

$query1 = 'SELECT count(*) as total_isi_locs FROM ' . APP_TABLE_PREFIX . 'record_search_key_isi_loc INNER JOIN ' . APP_TABLE_PREFIX . 'record_search_key on rek_pid = rek_isi_loc_pid ';
echo $query1."\n";
ob_flush();
$db = DB_API::get();
$log = FezLog::get();

try {
        $total = $db->fetchOne($query1);
} catch (Exception $ex) {
        $log = FezLog::get();
        $log->err('Message: '.$ex->getMessage().', File: '.__FILE__.', Line: '.__LINE__);
        return;
}
echo "count $total isi locs \n";
$inc = 100;

	ob_flush();
for($i=0; $i<($total+$inc); $i=$i+$inc) {
	
	$query2 = "SELECT * FROM " . APP_TABLE_PREFIX . "record_search_key_isi_loc INNER JOIN " . APP_TABLE_PREFIX . "record_search_key on rek_pid
 = rek_isi_loc_pid ORDER BY rek_isi_loc_id ASC  LIMIT ".$inc." OFFSET ".$i;

	echo $query2 ."\n";
	ob_flush();
	try {
	        $listing = $db->fetchAll($query2);
	} catch (Exception $ex) {
	        $log = FezLog::get();
	        $log->err('Message: '.$ex->getMessage().', File: '.__FILE__.', Line: '.__LINE__);
	        return;
	}
	
	$primary_keys = '';
	if (is_array($listing)) {
	 	for($j=0; $j<count($listing); $j++) {
	 		$ut = $listing[$j]['rek_isi_loc'];
	 		$pid = $listing[$j]['rek_isi_loc_pid'];
	 		if(! empty($ut))
	 			$primary_keys .= $ut.' ';		
	 	}
	}
	
	if(!empty($primary_keys)) {
		$records_xml = EstiSearchService::retrieve($primary_keys);
		
		if($records_xml) {
			foreach($records_xml->REC as $record) {
				
				$doc_type = $record->item->doctype->attributes()->code;
				$doc_type = "$doc_type";
				if(! array_key_exists($doc_type, $doc_type_mapping)) {
				        echo('Unsupported doc type when adding journal article subtype (Genre Subtype search key) ESTI record to MODS:'.$doc_type);
						ob_flush();
				        $log->err('Unsupported doc type when adding journal article subtype (Genre Subtype search key) ESTI record to MODS:'.$doc_type);
				        return false;
				} else {
					if ($doc_type_mapping[$doc_type][1] != "") {
						// Update record with new UT
						$pid = Record::getPIDByIsiLoc($record->item->ut);
						$record = new RecordGeneral($pid);
						$search_keys = array("Subtype");
						$values = array($doc_type_mapping[$doc_type][1]);
						echo "about to modify $pid with subtype ".$doc_type_mapping[$doc_type][1]."\n";
						$record->addSearchKeyValueList("MODS", "Metadata Object Description Schema", $search_keys, $values, true);
					}

				}
			}
		}
		sleep($sleep); // Wait before using the ESTI Search Service again		
	}	
}
